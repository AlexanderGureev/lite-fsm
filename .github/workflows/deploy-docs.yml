# Workflow для сборки и деплоя Next.js документации на GitHub Pages
name: Deploy Docs to GitHub Pages

on:
  # Запуск при пуше в ветку main
  push:
    branches: ["main"]
    paths:
      - "docs/**"

  # Возможность запуска workflow вручную из вкладки Actions
  workflow_dispatch:

# Устанавливаем разрешения для GITHUB_TOKEN для деплоя на GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Позволяем только один параллельный деплой, пропуская запуски в очереди между текущим и последним
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Задача сборки
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/docs/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/docs/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: "./docs/package-lock.json"

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # Автоматически внедряем basePath в конфигурацию Next.js
          static_site_generator: next

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      # Добавляем отдельный шаг для генерации поискового индекса Pagefind
      - name: Generate search index with Pagefind
        run: npx pagefind --site .next/server/app --output-path out/_pagefind

      # Создаем config file для Pagefind
      - name: Create Pagefind config file
        run: |
          echo '{ "baseUrl": "/lite-fsm" }' > out/_pagefind-config.json

      # Создаем entry файл для Pagefind
      - name: Create Pagefind entry file
        run: |
          cat > out/_pagefind/pagefind-entry.js << 'EOL'
          // Конфигурация Pagefind для GitHub Pages
          window.PagefindConfig = {
            baseUrl: "/lite-fsm",
            bundlePath: "/lite-fsm/_pagefind/"
          };
          EOL

      - name: Создаем .nojekyll в out директории
        run: touch ./out/.nojekyll

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/out

  # Задача деплоя
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
